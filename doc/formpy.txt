*formpy.vim* - ClangFormat functionality with YetAnotherPythonFormatter with
|text-objects|.

Author: Jakub Chlanda j.chlanda@gmail.com
License: This file is placed in the public domain.

==============================================================================
INTRODUCTION                                                            *formpy*

This plugin provides an easy way to format python code. It uses `YAPF`
(https://github.com/google/yapf) in conjunction with vim's |text-objects| and
is heavily inspired by clang-format
(https://clang.llvm.org/docs/ClangFormat.html) and vim integration work
provided by Fraser Cormack (https://github.com/frasercrmck/formative.vim).


As per |formative| the main benefit of using the plugin comes from a close
integration of `YAPF` with vim and enhanced support for |text-objects|. The
unfortunate thing is the way *object-select* and *text-objects* work with
python codebase, so some of your favourite |text-objects| might not work.

The plugin provides the same set of special mappings as |formative|, namely:
    <C-j>2j           - `YAPF` 2 lines downwards
    <C-j>ap           - `YAPF` around the current |paragraph|
    <C-j>k            - `YAPF` the current line (quickly)
    <C-j>u            - `YAPF` the whole file

The plugin is distributed with its own runner, that handles all the |vim| <->
`YAPF` communication. Prior to using the plugin, please make sure that `YAPF` is
available on your system.

==============================================================================
OPTIONS                                                         *formpy-options*

                                                                *g:formpy_style*
Specifies the formatting style, either by the name (for example `pep8` or
`goole`), or by providing a fully qualified file name containing style
settings. For full detail details on available formatting options please run:
`yapf --help` or `yapf --style-help`
Default: `pep`. Example: >
    let g:formpy_style = /path/to/my/your_style,yapf

<                                                              *g:formpy_logging*
Enable logging of debug output. Please note, that logging only works on
systems that provide `/tmp` director. The log is stored in:
`/tmp/formpy-format.log`
Default: `0`. Example: >
    let g:formpy_logging = 1
<                                                              *g:formpy_nor_key*
Specifies the key to invoke yapf in |normal| mode.
Default: `'<C-j>'`. Example: >
    let g:formpy_nor_key = '<leader>c'
<                                                              *g:formpy_vis_key*
Specifies the key to invoke yapf in |visual| mode.
Default: `'<C-j>'`. Example: >
    let g:formpy_vis_key = '<leader>c'
<                                                              *g:formpy_ins_key*
Specifies the key to invoke yapf in |insert| mode.
Default: `'<C-j>'`. Example: >
    let g:formpy_ins_key = '<leader>c'
<                                                             *g:formpy_line_key*
Specifies the key to invoke yapf in |normal| mode on the current line.
Intended to model the functionality of |c| -> |cc|, |d| -> |dd|, etc.
Default: `'<C-j>k'`. Example: >
    let g:formpy_line_key = '<leader>cc'
<                                                             *g:formpy_file_key*
Specifies the key to invoke yapf in |normal| mode on the current file.
Default: `'<C-j>u'`. Example: >
    let g:formpy_file_key = '<leader>d'
<
==============================================================================
FORMPY-FORMATIVE INTEGRATION                      *formpy-formative-integration*

Formative is great, in fact it is so good, that I had to write this plugin.
Once you start using formative, there is no way back, you have to have
formatting done automatically for you. And it is XXI century, the time of
manually inserting spaces (no tabs, no!) is over. The problem arises, when you
get used to the mappings provided by formative and want to have the same
mappings working in python. By default, whichever plugin is loaded last will,
be responsible for formatting, regardless of the |filetype|. The solution
provided here, is to have the desired mapping redefined in |after-directory|.
If you already maintain entries for `c`, `cpp`, `python` you can extend those
with the content of the corresponding files from
`<formpy.vim>/after_ftplugin`, if not, copying the content of the directory to
`<vim_root>/after/ftplugin` will do the trick.

==============================================================================
LICENSE                                                         *formpy-license*

This plugin is distributed under the same license as Vim iteself. See |license|
for more information.

vim:tw=78:fo=tcq2:ft=help:norl:
